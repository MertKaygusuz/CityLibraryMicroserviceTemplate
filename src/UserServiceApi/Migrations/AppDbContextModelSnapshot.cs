// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserServiceApi.ContextRelated;

#nullable disable

namespace UserServiceApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserServiceApi.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 731, DateTimeKind.Utc).AddTicks(2030),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 731, DateTimeKind.Utc).AddTicks(2030),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("UserServiceApi.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "d964dfdf-7cdc-4a7a-a951-04b540bac28d",
                            Address = "Admin's Address",
                            BirthDate = new DateTime(1994, 5, 3, 20, 28, 19, 872, DateTimeKind.Utc).AddTicks(2670),
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 872, DateTimeKind.Utc).AddTicks(2680),
                            FullName = "Admin",
                            Password = "$2a$11$UG/zfU0HjpWCQj4/1iu4uepaQhO3G1prPC3TSA5nMoQy5osS7r8cG",
                            UserName = "Admin"
                        },
                        new
                        {
                            UserId = "75a4749d-1090-4ade-894e-2612adcd0c1c",
                            Address = "Orhan's Address",
                            BirthDate = new DateTime(1994, 5, 3, 20, 28, 19, 872, DateTimeKind.Utc).AddTicks(2690),
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 872, DateTimeKind.Utc).AddTicks(2690),
                            FullName = "Orhan",
                            Password = "$2a$11$UG/zfU0HjpWCQj4/1iu4uepaQhO3G1prPC3TSA5nMoQy5osS7r8cG",
                            UserName = "User1"
                        },
                        new
                        {
                            UserId = "1146ae0a-cdf3-4822-a691-98f5da9c3f9e",
                            Address = "Kaya's Address",
                            BirthDate = new DateTime(1984, 5, 3, 20, 28, 19, 872, DateTimeKind.Utc).AddTicks(2690),
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 872, DateTimeKind.Utc).AddTicks(2690),
                            FullName = "Kaya",
                            Password = "$2a$11$UG/zfU0HjpWCQj4/1iu4uepaQhO3G1prPC3TSA5nMoQy5osS7r8cG",
                            UserName = "User2"
                        },
                        new
                        {
                            UserId = "739d9fdf-f824-40d8-b909-4586bdc283d3",
                            Address = "Kadriye's Address",
                            BirthDate = new DateTime(2004, 5, 3, 20, 28, 19, 872, DateTimeKind.Utc).AddTicks(2690),
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 872, DateTimeKind.Utc).AddTicks(2690),
                            FullName = "Kadriye",
                            Password = "$2a$11$UG/zfU0HjpWCQj4/1iu4uepaQhO3G1prPC3TSA5nMoQy5osS7r8cG",
                            UserName = "User3"
                        });
                });

            modelBuilder.Entity("UserServiceApi.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 731, DateTimeKind.Utc).AddTicks(4080),
                            RoleId = 1,
                            UserId = "d964dfdf-7cdc-4a7a-a951-04b540bac28d"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 731, DateTimeKind.Utc).AddTicks(4080),
                            RoleId = 2,
                            UserId = "d964dfdf-7cdc-4a7a-a951-04b540bac28d"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 731, DateTimeKind.Utc).AddTicks(4080),
                            RoleId = 2,
                            UserId = "75a4749d-1090-4ade-894e-2612adcd0c1c"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 731, DateTimeKind.Utc).AddTicks(4080),
                            RoleId = 2,
                            UserId = "1146ae0a-cdf3-4822-a691-98f5da9c3f9e"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 3, 20, 28, 19, 731, DateTimeKind.Utc).AddTicks(4080),
                            RoleId = 2,
                            UserId = "739d9fdf-f824-40d8-b909-4586bdc283d3"
                        });
                });

            modelBuilder.Entity("UserServiceApi.Entities.UserRole", b =>
                {
                    b.HasOne("UserServiceApi.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserServiceApi.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserServiceApi.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UserServiceApi.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
